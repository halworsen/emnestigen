{"version":3,"sources":["mixins/buildGraph.mixin.js","components/InteractiveCourseGraph.js","components/GraphVizCourseGraph.js","components/InfoPanel.js","App.js","serviceWorker.js","index.js"],"names":["buildGraphMixin","depthCutoff","buildGraph","courseCode","linkingData","graphData","this","initGraphData","exploredNodes","generatedLinks","maxDepth","queue","Queue","enqueue","code","depth","isEmpty","course_node","dequeue","data","linkingIndex","push","info","dataKey","key","customConfig","otherCode","dataIndex","some","node","Math","max","linkKey","includes","addGraphEdge","nodeIndex","addGraphNode","finalizeGraphData","InteractiveCourseGraph","props","state","chosen_course","graph","React","createRef","nodes","links","baseData","source","target","strokeWidth","linkData","Object","assign","max_depth","depthFraction","startColor","appConfig","interactiveGraph","endColor","nodeColor","colorBetween","maxSize","minSize","nodeSize","id","size","color","activeCourse","link","requiredColor","recommendedColor","graphConfig","width","height","content","ref","config","onClickNode","onDoubleClickNode","current","resetNodesPositions","Component","prototype","GVCourseGraph","join","gvGraph","fit","Graphviz","dot","options","CourseInput","className","placeholder","value","onChange","InfoPanel","req_content","rec_content","course_name","course_data","req_knowledge","required_knowledge","rec_knowledge","recommended_knowledge","name","onSearch","App","graphType","updateSize","bind","newType","setState","event","toUpperCase","nodeId","window","addEventListener","innerWidth","innerHeight","graphClass","onNodeSelected","onSearchUpdate","onClick","toggleGraphType","aboutBlurb","href","repositoryUrl","rel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"43rwDA0FeA,EAvFS,CAEvBC,YAAa,EAEbC,WAJuB,SAIZC,EAAYC,GAAc,IAAD,OAE/BC,EAAYC,KAAKC,gBAErB,GAAiB,OAAdF,EACF,OAAO,KAIR,IAAIG,EAAgB,GAEhBC,EAAiB,GACjBC,EAAW,EAEXC,EAAQ,IAAIC,IAEhB,IADAD,EAAME,QAAQ,CAACC,KAAMX,EAAYY,MAAO,KACjCJ,EAAMK,WAAW,CACvB,IAAMC,EAAcN,EAAMO,UAEpBJ,EAAOG,EAAYH,KACnBC,EAAQE,EAAYF,MAG1B,GAAGA,EAAQT,KAAKL,YACf,MAID,GAAIkB,EAAKL,GAST,IAAI,IAAIM,KAJRZ,EAAca,KAAKJ,GAIKb,EAAa,CACpC,IAAMkB,EAAOlB,EAAYgB,GAEnBG,EAAUD,EAAKE,IACfC,EAAeH,EAAKG,aAJU,aAQnC,IAAMC,EAAYP,EAAKL,GAAMS,GAASI,GAGhBnB,EAAcoB,MAAK,SAACC,GAAU,OAAQA,EAAKf,OAASY,OAEzEf,EAAME,QAAQ,CAACC,KAAMY,EAAWX,MAAOA,EAAQ,IAC/CL,EAAWoB,KAAKC,IAAIrB,EAAUK,EAAQ,IAIvC,IAAMiB,EAAUlB,EAAK,IAAIY,EACrBjB,EAAewB,SAASD,KAE3B,EAAKE,aAAa7B,EAAWS,EAAMY,EAAWD,GAC9ChB,EAAeY,KAAKW,KAftB,IAAI,IAAIL,KAAaR,EAAKL,GAAMS,GAAW,KAqB7C,IAAI,IAAIY,KAAa3B,EAAe,CACnC,IAAMqB,EAAOrB,EAAc2B,GAI3B7B,KAAK8B,aAAa/B,EAAWwB,EAAKf,KAAMe,EAAKd,MAAOL,GASrD,MAJoC,mBAA1BJ,KAAK+B,oBACdhC,EAAYC,KAAK+B,kBAAkBhC,IAG7BA,I,eC5EHiC,E,YACL,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAEDC,MAAQ,CACZC,cAAe,IAMhB,EAAKxC,YAAc,EAEnB,EAAKyC,MAAQC,IAAMC,YAZD,E,6EAgBlB,MAAQ,CACPC,MAAO,GACPC,MAAO,M,mCAIIzC,EAAWS,EAAMY,EAAWD,GACxC,IAAMsB,EAAW,CAChBC,OAAQlC,EACRmC,OAAQvB,EACRwB,YAAa,GAGRC,EAAWC,OAAOC,OAAO,GAAIN,EAAUtB,GAE7CpB,EAAUyC,MAAMzB,KAAK8B,K,mCAGT9C,EAAWS,EAAMC,EAAOuC,GACpC,IAAIC,EAAgB,EACjBD,EAAY,IACdC,EAAgBxC,EAAQuC,GAGzB,IAAME,EAAaC,EAAUC,iBAAiBb,MAAMW,WAC9CG,EAAWF,EAAUC,iBAAiBb,MAAMc,SAC5CC,EAAYC,IAAaL,EAAYG,EAAUJ,EAAe,OAE9DO,EAAUL,EAAUC,iBAAiBb,MAAMiB,QAC3CC,EAAUN,EAAUC,iBAAiBb,MAAMkB,QAC3CC,EAAWD,GAAYD,EAAUC,IAAY,EAAIR,GAEvDlD,EAAUwC,MAAMxB,KAAK,CACpB4C,GAAInD,EACJoD,KAAMF,EACNG,MAAOP,M,+BAIC,IAAD,OACF9C,EAAOR,KAAKiC,MAAM6B,aAClB/D,EAAYC,KAAKJ,WAAWY,EAAM,CACvC,CACCU,IAAK,mBACLC,aAAc,CAAC0C,MAAOV,EAAUC,iBAAiBW,KAAKC,gBAEvD,CACC9C,IAAK,sBACLC,aAAc,CAAC0C,MAAOV,EAAUC,iBAAiBW,KAAKE,qBAIxDC,EAAYC,MAAQnE,KAAKiC,MAAMkC,MAC/BD,EAAYE,OAASpE,KAAKiC,MAAMmC,OAEhC,IAAIC,EAAU,KAcd,OAXGxD,EAAKL,KACP6D,EAAW,kBAAC,QAAD,CAAOC,IAAKtE,KAAKoC,MAC3BlB,IAAI,yBACJyC,GAAG,sBACH9C,KAAMd,EACNwE,OAAQL,EACRM,YAAaxE,KAAKiC,MAAMuC,YACxBC,kBAAmB,kBAAM,EAAKrC,MAAMsC,QAAQC,0BAIvCN,M,GAtF4BhC,IAAMuC,WA2F3C9B,OAAOC,OAAOf,EAAuB6C,UAAWnF,GAEjCsC,Q,QC9FT8C,E,YACL,WAAY7C,GAAQ,IAAD,8BAClB,4CAAMA,KAEDC,MAAQ,CACZC,cAAe,IAJE,E,6EASlB,MAAO,CAAC,8F,mCAGIpC,EAAWS,EAAMY,EAAWD,GACxCpB,EAAUgB,KAAKP,EAAO,OAASY,EAAY,WAAcD,EAAa0C,MAAQ,U,mCAGlE9D,EAAWS,EAAMC,EAAOuC,GACpC,IAAIC,EAAgB,EACjBD,EAAY,IACdC,EAAgBxC,EAAQuC,GAGzB,IAAME,EAAaC,EAAUC,iBAAiBb,MAAMW,WAC9CG,EAAWF,EAAUC,iBAAiBb,MAAMc,SAC5CC,EAAYC,IAAaL,EAAYG,EAAUJ,EAAe,OAEpElD,EAAUgB,KAAKP,EAAO,WAAc8C,EAAY,Q,wCAG/BvD,GAGjB,OAFAA,EAAUgB,KAAK,KAERhB,EAAUgF,KAAK,M,+BAItB,IAAMvE,EAAOR,KAAKiC,MAAM6B,aAClB/D,EAAYC,KAAKJ,WAAWY,EAAM,CACvC,CACCU,IAAK,mBACLC,aAAc,CAAC0C,MAAOV,EAAU6B,QAAQjB,KAAKC,gBAE9C,CACC9C,IAAK,sBACLC,aAAc,CAAC0C,MAAOV,EAAU6B,QAAQjB,KAAKE,qBAIzCC,EAAc,CACnBe,KAAK,EACLd,MAAOnE,KAAKiC,MAAMkC,MAClBC,OAAQpE,KAAKiC,MAAMmC,QAGhBC,EAAU,KAWd,OARGxD,EAAKL,KACP6D,EAAW,kBAACa,EAAA,EAAD,CACVhE,IAAI,gBACJiE,IAAKpF,EACLqF,QAASlB,KAIJG,M,GAlEmBhC,IAAMuC,WAuElC9B,OAAOC,OAAO+B,EAAcD,UAAWnF,GAExBoF,QC/Ef,SAASO,EAAYpD,GACpB,OACC,yBAAKf,IAAI,wBACR,0BAAMA,IAAI,kBAAkBoE,UAAU,mBACrC,8BACCpE,IAAI,kBACJqE,YAAY,yBACZD,UAAU,sBACVE,MAAOvD,EAAMuD,MACbC,SAAUxD,EAAMwD,a,IAsENC,E,iLA7Db,IAAIC,EACAC,EACAC,EAAc,GAEZC,EAAcjF,EAAKb,KAAKiC,MAAM6B,cAEpC,GAAGjD,EAAKb,KAAKiC,MAAM6B,cAAe,CACjC,IAAMiC,EAAgBD,EAAYE,mBAC5BC,EAAgBH,EAAYI,sBAClCL,EAAcC,EAAYK,KAEvBJ,IACFJ,EACC,yBAAKzE,IAAI,uBACR,2DACA,uBAAGA,IAAI,0BAA0B6E,GACjC,+BAKAE,IACFL,EACC,yBAAK1E,IAAI,uBACR,uDACA,uBAAGA,IAAI,0BAA0B+E,GACjC,+BAMJ,OACC,yBACC/E,IAAI,qBACJoE,UAAU,aAEV,6BAEA,yBACCpE,IAAI,oBACJoE,UAAU,YAEV,kBAACD,EAAD,CAAanE,IAAI,cAAcsE,MAAOxF,KAAKiC,MAAM6B,aAAc2B,SAAUzF,KAAKiC,MAAMmE,WACpF,wBAAIlF,IAAI,iBAAiBoE,UAAU,iBAAiBO,IAGrD,6BAEA,yBACC3E,IAAI,mBACJoE,UAAU,WAETK,EACAC,Q,GAxDkBvD,IAAMuC,WC6GfyB,E,YAxHX,WAAYpE,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTiC,MAAO,EACPC,OAAQ,EACRkC,UAAW,MACXxC,aAAc,IAGlB,EAAKyC,WAAa,EAAKA,WAAWC,KAAhB,gBAVH,E,+EAcf,IAAMC,EAAoC,QAAzBzG,KAAKkC,MAAMoE,UAAuB,KAAO,MAC1DtG,KAAK0G,SAAS,CACVvC,MAAOnE,KAAKkC,MAAMiC,MAClBC,OAAQpE,KAAKkC,MAAMkC,OACnBkC,UAAWG,EACX3C,aAAc9D,KAAKkC,MAAM4B,iB,qCAIlB6C,GACX3G,KAAK0G,SAAS,CACVvC,MAAOnE,KAAKkC,MAAMiC,MAClBC,OAAQpE,KAAKkC,MAAMkC,OACnBkC,UAAWtG,KAAKkC,MAAMoE,UACtBxC,aAAc6C,EAAMhE,OAAO6C,MAAMoB,kB,qCAI1BC,GACX7G,KAAK0G,SAAS,CACVvC,MAAOnE,KAAKkC,MAAMiC,MAClBC,OAAQpE,KAAKkC,MAAMkC,OACnBkC,UAAWtG,KAAKkC,MAAMoE,UACtBxC,aAAc+C,M,0CAKlB7G,KAAKuG,aACLO,OAAOC,iBAAiB,SAAU/G,KAAKuG,c,mCAIvCvG,KAAK0G,SAAS,CACVvC,MAAO2C,OAAOE,WACd5C,OAAQ0C,OAAOG,YACfnD,aAAc9D,KAAKkC,MAAM4B,iB,+BAIvB,IAEF1B,EAFC,OACD8E,EAAa,iBA2BjB,MAxB4B,QAAzBlH,KAAKkC,MAAMoE,UACVlE,EACI,kBAAC,EAAD,CACIlB,IAAI,cACJoE,UAAU,WACVxB,aAAc9D,KAAKkC,MAAM4B,aACzBK,MAAOnE,KAAKkC,MAAMiC,MAClBC,OAAQpE,KAAKkC,MAAMkC,OACnBI,YAAa,SAACb,GAAD,OAAQ,EAAKwD,eAAexD,MAGlB,OAAzB3D,KAAKkC,MAAMoE,YACjBY,GAAc,WACd9E,EACI,kBAAC,EAAD,CACIlB,IAAI,cACJoE,UAAU,UACVxB,aAAc9D,KAAKkC,MAAM4B,aACzBK,MAAOnE,KAAKkC,MAAMiC,MAClBC,OAAQpE,KAAKkC,MAAMkC,UAM3B,yBAAKlD,IAAI,eAAeoE,UAAU,gBAC9B,kBAAC,EAAD,CACIpE,IAAI,YACJ4C,aAAc9D,KAAKkC,MAAM4B,aACzBsC,SAAU,SAACO,GAAD,OAAW,EAAKS,eAAeT,MAG7C,yBAAKrB,UAAW4B,GACX9E,GAGL,yBACIkD,UAAU,eACV+B,QAAS,kBAAM,EAAKC,oBAEpB,2BAAItH,KAAKkC,MAAMoE,YAGnB,yBAAKhB,UAAU,SACX,2BACKnC,EAAUoE,WAAapE,EAAUoE,WAAa,iDAC/C,qCACA,uBACIjC,UAAU,SACVkC,KAAMrE,EAAUsE,cAChB9E,OAAO,SACP+E,IAAI,uBAJR,iB,GA1GNrF,IAAMuC,WCKJ+C,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9bf92cc6.chunk.js","sourcesContent":["import Queue from \"queue-fifo\";\r\nimport data from \"../data/course_data.json\";\r\n\r\nconst buildGraphMixin = {\r\n\t// Tinkering has shown that 5 is a resonable depth to stop at\r\n\tdepthCutoff: 5,\r\n\r\n\tbuildGraph(courseCode, linkingData) {\r\n\t\t// Have the class initialize the graph data\r\n\t\tlet graphData = this.initGraphData();\r\n\r\n\t\tif(graphData === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// Holds all dequeued nodes. Used to hold node depths and indicate which nodes have been explored\r\n\t\tlet exploredNodes = [];\r\n\t\t// Holds unique string keys representing links that have been generated already\r\n\t\tlet generatedLinks = [];\r\n\t\tlet maxDepth = 0;\r\n\r\n\t\tlet queue = new Queue();\r\n\t\tqueue.enqueue({code: courseCode, depth: 0});\r\n\t\twhile(!queue.isEmpty()) {\r\n\t\t\tconst course_node = queue.dequeue();\r\n\r\n\t\t\tconst code = course_node.code;\r\n\t\t\tconst depth = course_node.depth;\r\n\r\n\t\t\t// Stop building the graph if we've gone too deep\r\n\t\t\tif(depth > this.depthCutoff) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// If there is no data associated with the course code, ignore it as it cannot be a real course\r\n\t\t\tif(!data[code]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Mark the node as explored\r\n\t\t\texploredNodes.push(course_node);\r\n\r\n\t\t\t// Go through each data key to build the graph by,\r\n\t\t\t// and build links from them\r\n\t\t\tfor(var linkingIndex in linkingData) {\r\n\t\t\t\tconst info = linkingData[linkingIndex];\r\n\r\n\t\t\t\tconst dataKey = info.key;\r\n\t\t\t\tconst customConfig = info.customConfig;\r\n\r\n\t\t\t\t// Add each course in whatever list we're dealing with\r\n\t\t\t\tfor(var dataIndex in data[code][dataKey]) {\r\n\t\t\t\t\tconst otherCode = data[code][dataKey][dataIndex];\r\n\r\n\t\t\t\t\t// Only explore the node if it hasn't been explored before\r\n\t\t\t\t\tconst been_explored = exploredNodes.some((node) => {return (node.code === otherCode);});\r\n\t\t\t\t\tif(!been_explored) {\r\n\t\t\t\t\t\tqueue.enqueue({code: otherCode, depth: depth + 1});\r\n\t\t\t\t\t\tmaxDepth = Math.max(maxDepth, depth + 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// But also check if links have been made, a single node can have multiple links after all\r\n\t\t\t\t\tconst linkKey = code+\",\"+otherCode;\r\n\t\t\t\t\tif(!generatedLinks.includes(linkKey)) {\r\n\t\t\t\t\t\t// Have the class add the edge to the graph data\r\n\t\t\t\t\t\tthis.addGraphEdge(graphData, code, otherCode, customConfig);\r\n\t\t\t\t\t\tgeneratedLinks.push(linkKey);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(var nodeIndex in exploredNodes) {\r\n\t\t\tconst node = exploredNodes[nodeIndex];\r\n\t\t\t// Have the class add the node to the graph data\r\n\t\t\t// We do it here so we can do a gradual coloring of the nodes\r\n\t\t\t// Neither Graphviz nor the interactive graph care about the order in which we add this information\r\n\t\t\tthis.addGraphNode(graphData, node.code, node.depth, maxDepth)\r\n\t\t}\r\n\r\n\t\t// Allow the class to \"finish\" the graph data somehow\r\n\t\t// But also let classes ignore this step by simply not defining the method\r\n\t\tif(typeof this.finalizeGraphData == \"function\") {\r\n\t\t\tgraphData = this.finalizeGraphData(graphData);\r\n\t\t}\r\n\r\n\t\treturn graphData;\r\n\t}\r\n}\r\n\r\nexport default buildGraphMixin;\r\n","import React from \"react\";\r\nimport {Graph} from \"react-d3-graph\";\r\nimport colorBetween from \"color-between\";\r\nimport buildGraphMixin from \"../mixins/buildGraph.mixin.js\";\r\n\r\nimport data from \"../data/course_data.json\";\r\n\r\nimport graphConfig from \"../config/graph_config.json\";\r\nimport appConfig from \"../config/emnestigen_config.json\";\r\n\r\nclass InteractiveCourseGraph extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tchosen_course: \"\"\r\n\t\t};\r\n\r\n\t\t// The depth at which the graph builder stops\r\n\t\t// This is to prevent crashes when building cyclic graphs (they exist in the dataset!)\r\n\t\t// Tinkering and checking some big graphs has shown 5 to be a good cutoff\r\n\t\tthis.depthCutoff = 5;\r\n\r\n\t\tthis.graph = React.createRef();\r\n\t}\r\n\r\n\tinitGraphData() {\r\n\t\treturn ({\r\n\t\t\tnodes: [],\r\n\t\t\tlinks: []\r\n\t\t});\r\n\t}\r\n\r\n\taddGraphEdge(graphData, code, otherCode, customConfig) {\r\n\t\tconst baseData = {\r\n\t\t\tsource: code,\r\n\t\t\ttarget: otherCode,\r\n\t\t\tstrokeWidth: 3\r\n\t\t};\r\n\r\n\t\tconst linkData = Object.assign({}, baseData, customConfig);\r\n\r\n\t\tgraphData.links.push(linkData);\r\n\t}\r\n\r\n\taddGraphNode(graphData, code, depth, max_depth) {\r\n\t\tlet depthFraction = 0;\r\n\t\tif(max_depth > 0) {\r\n\t\t\tdepthFraction = depth / max_depth;\r\n\t\t}\r\n\r\n\t\tconst startColor = appConfig.interactiveGraph.nodes.startColor;\r\n\t\tconst endColor = appConfig.interactiveGraph.nodes.endColor;\r\n\t\tconst nodeColor = colorBetween(startColor, endColor, depthFraction, \"hex\");\r\n\r\n\t\tconst maxSize = appConfig.interactiveGraph.nodes.maxSize;\r\n\t\tconst minSize = appConfig.interactiveGraph.nodes.minSize;\r\n\t\tconst nodeSize = minSize + ((maxSize - minSize) * (1 - depthFraction));\r\n\r\n\t\tgraphData.nodes.push({\r\n\t\t\tid: code,\r\n\t\t\tsize: nodeSize,\r\n\t\t\tcolor: nodeColor\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst code = this.props.activeCourse;\r\n\t\tconst graphData = this.buildGraph(code, [\r\n\t\t\t{\r\n\t\t\t\tkey: \"required_courses\",\r\n\t\t\t\tcustomConfig: {color: appConfig.interactiveGraph.link.requiredColor}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tkey: \"recommended_courses\",\r\n\t\t\t\tcustomConfig: {color: appConfig.interactiveGraph.link.recommendedColor}\r\n\t\t\t}\r\n\t\t]);\r\n\r\n\t\tgraphConfig.width = this.props.width;\r\n\t\tgraphConfig.height = this.props.height;\r\n\r\n\t\tlet content = null;\r\n\r\n\t\t// Only display the graph if its graph data was generated (which it will be if the raw data exists)\r\n\t\tif(data[code]) {\r\n\t\t\tcontent = (<Graph ref={this.graph}\r\n\t\t\t\tkey=\"interactiveCourseGraph\"\r\n\t\t\t\tid=\"course-dependencies\"\r\n\t\t\t\tdata={graphData}\r\n\t\t\t\tconfig={graphConfig}\r\n\t\t\t\tonClickNode={this.props.onClickNode}\r\n\t\t\t\tonDoubleClickNode={() => this.graph.current.resetNodesPositions()}\r\n\t\t\t/>);\r\n\t\t}\r\n\r\n\t\treturn content;\r\n\t}\r\n}\r\n\r\n// Add the mixin for building graph data\r\nObject.assign(InteractiveCourseGraph.prototype, buildGraphMixin);\r\n\r\nexport default InteractiveCourseGraph;\r\n","import React from \"react\";\r\nimport {Graphviz} from \"graphviz-react\";\r\nimport colorBetween from \"color-between\";\r\nimport buildGraphMixin from \"../mixins/buildGraph.mixin.js\";\r\n\r\nimport data from \"../data/course_data.json\";\r\n\r\nimport appConfig from \"../config/emnestigen_config.json\";\r\n\r\nclass GVCourseGraph extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tchosen_course: \"\"\r\n\t\t};\r\n\t}\r\n\r\n\tinitGraphData() {\r\n\t\treturn [\"digraph{\\nbgcolor=\\\"#ecf0f1\\\"\\nnode[style=filled, shape=circle, color=Gray]\\nedge[dir=1]\\n\"];\r\n\t}\r\n\r\n\taddGraphEdge(graphData, code, otherCode, customConfig) {\r\n\t\tgraphData.push(code + \" -> \" + otherCode + \"[color=\\\"\" + customConfig.color + \"\\\"]\\n\");\r\n\t}\r\n\r\n\taddGraphNode(graphData, code, depth, max_depth) {\r\n\t\tlet depthFraction = 0;\r\n\t\tif(max_depth > 0) {\r\n\t\t\tdepthFraction = depth / max_depth;\r\n\t\t}\r\n\r\n\t\tconst startColor = appConfig.interactiveGraph.nodes.startColor;\r\n\t\tconst endColor = appConfig.interactiveGraph.nodes.endColor;\r\n\t\tconst nodeColor = colorBetween(startColor, endColor, depthFraction, \"hex\");\r\n\r\n\t\tgraphData.push(code + \"[color=\\\"\" + nodeColor + \"\\\"]\");\r\n\t}\r\n\r\n\tfinalizeGraphData(graphData) {\r\n\t\tgraphData.push(\"}\");\r\n\r\n\t\treturn graphData.join(\"\");\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst code = this.props.activeCourse;\r\n\t\tconst graphData = this.buildGraph(code, [\r\n\t\t\t{\r\n\t\t\t\tkey: \"required_courses\",\r\n\t\t\t\tcustomConfig: {color: appConfig.gvGraph.link.requiredColor}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tkey: \"recommended_courses\",\r\n\t\t\t\tcustomConfig: {color: appConfig.gvGraph.link.recommendedColor}\r\n\t\t\t}\r\n\t\t]);\r\n\r\n\t\tconst graphConfig = {\r\n\t\t\tfit: true,\r\n\t\t\twidth: this.props.width,\r\n\t\t\theight: this.props.height\r\n\t\t}\r\n\r\n\t\tlet content = null;\r\n\r\n\t\t// Only display the graph if its graph data was generated (which it will be if the raw data exists)\r\n\t\tif(data[code]) {\r\n\t\t\tcontent = (<Graphviz\r\n\t\t\t\tkey=\"gvCourseGraph\"\r\n\t\t\t\tdot={graphData}\r\n\t\t\t\toptions={graphConfig}\r\n\t\t\t/>);\r\n\t\t}\r\n\r\n\t\treturn content;\r\n\t}\r\n}\r\n\r\n// Add the mixin for building graph data\r\nObject.assign(GVCourseGraph.prototype, buildGraphMixin);\r\n\r\nexport default GVCourseGraph;\r\n","import React from \"react\";\r\nimport data from \"../data/course_data.json\";\r\n\r\nfunction CourseInput(props) {\r\n\treturn (\r\n\t\t<div key=\"courseInputContainer\">\r\n\t\t\t<form key=\"courseInputForm\" className=\"courseInputForm\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tkey=\"courseInputArea\"\r\n\t\t\t\t\tplaceholder=\"Skriv inn en emnekode!\"\r\n\t\t\t\t\tclassName=\"courseInputTextArea\"\r\n\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\tonChange={props.onChange}\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nclass InfoPanel extends React.Component {\r\n\trender() {\r\n\t\tlet req_content;\r\n\t\tlet rec_content;\r\n\t\tlet course_name = \"\";\r\n\r\n\t\tconst course_data = data[this.props.activeCourse];\r\n\r\n\t\tif(data[this.props.activeCourse]) {\r\n\t\t\tconst req_knowledge = course_data.required_knowledge;\r\n\t\t\tconst rec_knowledge = course_data.recommended_knowledge;\r\n\t\t\tcourse_name = course_data.name\r\n\r\n\t\t\tif(req_knowledge) {\r\n\t\t\t\treq_content = (\r\n\t\t\t\t\t<div key=\"reqKnowledgeContent\">\r\n\t\t\t\t\t\t<h2>Obligatoriske forkunnskaper</h2>\r\n\t\t\t\t\t\t<p key=\"courseInfoReqKnowledge\">{req_knowledge}</p>\r\n\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif(rec_knowledge) {\r\n\t\t\t\trec_content = (\r\n\t\t\t\t\t<div key=\"recKnowledgeContent\">\r\n\t\t\t\t\t\t<h2>Anbefalte forkunnskaper</h2>\r\n\t\t\t\t\t\t<p key=\"courseInfoRecKnowledge\">{rec_knowledge}</p>\r\n\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tkey=\"infoPanelContainer\"\r\n\t\t\t\tclassName=\"infoPanel\"\r\n\t\t\t>\r\n\t\t\t\t<hr/>\r\n\r\n\t\t\t\t<div\r\n\t\t\t\t\tkey=\"infoPanelTitleBox\"\r\n\t\t\t\t\tclassName=\"titleBox\"\r\n\t\t\t\t>\t\r\n\t\t\t\t\t<CourseInput key=\"courseInput\" value={this.props.activeCourse} onChange={this.props.onSearch}/>\r\n\t\t\t\t\t<h3 key=\"courseInfoName\" className=\"infoTitleName\">{course_name}</h3>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<hr/>\r\n\r\n\t\t\t\t<div\r\n\t\t\t\t\tkey=\"infoPanelInfoBox\"\r\n\t\t\t\t\tclassName=\"infoBox\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{req_content}\r\n\t\t\t\t\t{rec_content}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default InfoPanel;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport InteractiveCourseGraph from \"./components/InteractiveCourseGraph.js\";\r\nimport GVCourseGraph from \"./components/GraphVizCourseGraph.js\";\r\nimport InfoPanel from \"./components/InfoPanel.js\";\r\nimport appConfig from \"./config/emnestigen_config.json\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            width: 0,\r\n            height: 0,\r\n            graphType: \"D3G\",\r\n            activeCourse: \"\"\r\n        };\r\n\r\n        this.updateSize = this.updateSize.bind(this);\r\n    }\r\n\r\n    toggleGraphType() {\r\n        const newType = (this.state.graphType === \"D3G\") ? \"GV\" : \"D3G\";\r\n        this.setState({\r\n            width: this.state.width,\r\n            height: this.state.height,\r\n            graphType: newType,\r\n            activeCourse: this.state.activeCourse\r\n        })\r\n    }\r\n\r\n    onSearchUpdate(event) {\r\n        this.setState({\r\n            width: this.state.width,\r\n            height: this.state.height,\r\n            graphType: this.state.graphType,\r\n            activeCourse: event.target.value.toUpperCase()\r\n        });\r\n    }\r\n\r\n    onNodeSelected(nodeId) {\r\n        this.setState({\r\n            width: this.state.width,\r\n            height: this.state.height,\r\n            graphType: this.state.graphType,\r\n            activeCourse: nodeId\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateSize();\r\n        window.addEventListener(\"resize\", this.updateSize);\r\n    }\r\n\r\n    updateSize() {\r\n        this.setState({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n            activeCourse: this.state.activeCourse\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let graphClass = \"graphContainer\";\r\n        let graph;\r\n\r\n        if(this.state.graphType === \"D3G\") {\r\n            graph = (\r\n                <InteractiveCourseGraph\r\n                    key=\"courseGraph\"\r\n                    className=\"d3gGraph\"\r\n                    activeCourse={this.state.activeCourse}\r\n                    width={this.state.width}\r\n                    height={this.state.height}\r\n                    onClickNode={(id) => this.onNodeSelected(id)}\r\n                />\r\n            );\r\n        } else if(this.state.graphType === \"GV\") {\r\n            graphClass += \" gvGraph\";\r\n            graph = (\r\n                <GVCourseGraph\r\n                    key=\"courseGraph\"\r\n                    className=\"gvGraph\"\r\n                    activeCourse={this.state.activeCourse}\r\n                    width={this.state.width}\r\n                    height={this.state.height}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div key=\"appContainer\" className=\"appContainer\">\r\n                <InfoPanel\r\n                    key=\"infoPanel\"\r\n                    activeCourse={this.state.activeCourse}\r\n                    onSearch={(event) => this.onSearchUpdate(event)}\r\n                />\r\n\r\n                <div className={graphClass}>\r\n                    {graph}\r\n                </div>\r\n\r\n                <div\r\n                    className=\"graphToggler\"\r\n                    onClick={() => this.toggleGraphType()}\r\n                >\r\n                    <p>{this.state.graphType}</p>\r\n                </div>\r\n\r\n                <div className=\"about\">\r\n                    <p>\r\n                        {appConfig.aboutBlurb ? appConfig.aboutBlurb : \"Appen ble ikke konfigurert riktig 😢\"}\r\n                        <span> | </span>\r\n                        <a\r\n                            className=\"ghLink\"\r\n                            href={appConfig.repositoryUrl}\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >\r\n                            GitHub\r\n                        </a>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}